.pn 0
.EQ
delim $$
define RR 'bold R'
define SS 'bold S'
define II 'bold I'
define mo '"\(mo"'
define EXIST ?"\z\-\d\z\-\r\-\d\v'0.2m'\(br\v'-0.2m'"?
define NEXIST ?"\z\-\d\z\o'\-\(sl'\r\-\d\v'0.2m'\(br\v'-0.2m'"?
define ALL ?"\o'V-'"?
define subset '\(sb'
define subeq  '\(ib'
define supset '\(sp'
define supeq  '\(ip'
define mo '\(mo'
define nm ?"\o'\(mo\(sl'"?
define li '\& sup ['
define lo '\& sup ('
define hi '\& sup ]'
define ho '\& sup )'
.EN
.ls 1
.ce
A LOGICAL IMPLEMENTATION OF ARITHMETIC
.sp 3
.ce
John G. Cleary
.ce
The University of Calgary, Alberta, Canada.
.sp 20
\u1\dAuthor's Present Address: Man-Machine Systems Group, Department of
Computer Science, The University of Calgary, 2500 University Drive NW
Calgary, Canada T2N 1N4. Phone: (403)220-6087.
.br
.nf
UUCP:  ...!{ihnp4,ubc-vision}!alberta!calgary!cleary
       ...!nrl-css!calgary!cleary
ARPA:  cleary.calgary.ubc@csnet-relay
CDN:   cleary@calgary
.fi
.sp 2
.ls 2
.bp 0
.ls 2
.ce
Abstract
.pp
So far implementations of real arithmetic within logic programming
have been non-logical.  A logical description of the behaviour of arithmetic
on actual
machines using finite precision numbers is not readily available.
Using interval analysis a simple description of real arithmetic is possible.
This can be translated to an implementation within Prolog.
As well as having a sound logical basis the resulting system
allows a very concise and powerful programming style and is potentially
very efficient.
.bp
.sh "1 Introduction"
.pp
Logic programming aims to use sets of logical formulae as
statements in a programming language.
Because of many practical difficulties the full generality of logic
cannot (yet) be used in this way.   However, by restricting the
class of formulae used to Horn clauses practical and efficient
languages such as PROLOG are obtained.
One of the main problems in logic programming is to extend this area
of practicality and efficiency to an ever wider range of formulae and
applications.
This paper considers such an implementation for arithmetic.
.pp
To see why arithmetic as it is commonly implemented in PROLOG systems
is not logical consider the following example:
.sp
